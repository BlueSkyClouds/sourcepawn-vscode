{
  "name": "SourcePawn",
  "patterns": [
    {
      "include": "#strings"
    },
    {
      "include": "#comments"
    },
    {
      "match": "(\\#include|\\#tryinclude)\\s*((?:\\<|\").+(?:\\>|\"))",
      "name": "meta.include.sourcepawn",
      "captures": {
        "1": {
          "name": "keyword.control.sourcepawn"
        },
        "2": {
          "name": "string.sourcepawn"
        }
      }
    },
    {
      "match": "(\\#pragma)\\s+(.+?(?=//))",
      "name": "meta.pragma.line-comment.sourcepawn",
      "captures": {
        "1": {
          "name": "keyword.control.pragma.sourcepawn"
        },
        "2": {
          "name": "entity.other.attribute-name.sourcepawn"
        }
      }
    },
    {
      "match": "(\\#pragma)\\s+([A-Za-z ]+)",
      "name": "meta.pragma.block-comment.sourcepawn",
      "captures": {
        "1": {
          "name": "keyword.control.pragma.sourcepawn"
        },
        "2": {
          "name": "entity.other.attribute-name.sourcepawn"
        }
      }
    },
    {
      "comment": "Typedef",
      "match": "(typedef)\\s+(\\w+)",
      "captures": {
        "1": {
          "name": "keyword.typedef.sourcepawn"
        },
        "2": {
          "name": "support.type.core.typedef.sourcepawn"
        }
      }
    },
    {
      "comment": "Typeset",
      "match": "(typeset)\\s+(\\w+)",
      "captures": {
        "1": {
          "name": "keyword.typeset.sourcepawn"
        },
        "2": {
          "name": "support.type.core.typeset.sourcepawn"
        }
      }
    },
    {
      "comment": "Property",
      "match": "(property)\\s+(\\w+)\\s+(\\w+)",
      "captures": {
        "1": {
          "name": "keyword.property.sourcepawn"
        },
        "2": {
          "name": "support.type.core.property.sourcepawn"
        },
        "3": {
          "name": "variable.parameter.sourcepawn"
        }
      }
    },
    {
      "comment": "Function type definition",
      "match": "(function)\\s+(\\w+)\\s*\\(",
      "captures": {
        "1": {
          "name": "keyword.function.sourcepawn"
        },
        "2": {
          "name": "support.type.core.function.sourcepawn"
        }
      }
    },
    {
      "match": "(\\#define)\\s*(\\w*)",
      "name": "meta.define.sourcepawn",
      "captures": {
        "1": {
          "name": "keyword.control.define.sourcepawn"
        },
        "2": {
          "name": "variable.other.constant.sourcepawn"
        }
      }
    },
    {
      "match": "(\\#undef)\\s*(\\w*)",
      "name": "meta.undef.sourcepawn",
      "captures": {
        "1": {
          "name": "keyword.control.undef.sourcepawn"
        },
        "2": {
          "name": "variable.other.constant.sourcepawn"
        }
      }
    },
    {
      "comment": "Constructors",
      "match": "(new)\\s+(?:(\\w+)\\s*\\()?",
      "captures": {
        "1": {
          "name": "keyword.view.sourcepawn"
        },
        "2": {
          "name": "support.type.core.methodmap_constructor.sourcepawn"
        }
      }
    },
    {
      "comment": "Preprocessor #if defined",
      "match": "(#if)\\s+(defined)\\s+(\\w+)",
      "captures": {
        "1": {
          "name": "keyword.control.misc.sourcepawn"
        },
        "2": {
          "name": "meta.preprocessor.conditional.sourcepawn"
        },
        "3": {
          "name": "variable.other.constant.sourcepawn"
        }
      }
    },
    {
      "comment": "Preprocessor keywords",
      "match": "#\\b(if|else|endif|emit|deprecated|undef|endinput|endscript|assert|define|error|warning|file)\\b",
      "name": "keyword.control.misc.sourcepawn"
    },
    {
      "comment": "view_as",
      "match": "(view_as)\\s*<\\s*([A-Za-z0-9_]*)\\s*>",
      "captures": {
        "1": {
          "name": "keyword.view_as.sourcepawn"
        },
        "2": {
          "name": "support.type.core.view_as.sourcepawn"
        }
      }
    },
    {
      "comment": "Control statements",
      "name": "keyword.control.statement.sourcepawn",
      "match": "\\s*\\b(?:if|else|for|while|do|switch|case|default|return)\\b"
    },
    {
      "comment": "Enum structs",
      "match": "^\\s*(enum\\s+struct\\s+)(\\w*)",
      "captures": {
        "1": {
          "name": "keyword.enum_struct.sourcepawn"
        },
        "2": {
          "name": "support.type.core.enum_struct.sourcepawn"
        }
      }
    },
    {
      "comment": "Structs",
      "match": "^\\s*(struct)\\s+(\\w+)",
      "captures": {
        "1": {
          "name": "keyword.struct.sourcepawn"
        },
        "2": {
          "name": "support.type.core.struct.sourcepawn"
        }
      }
    },
    {
      "comment": "Enums",
      "match": "^\\s*(enum\\s*)(\\w*)",
      "captures": {
        "1": {
          "name": "keyword.enum.sourcepawn"
        },
        "2": {
          "name": "support.type.core.enum.sourcepawn"
        }
      }
    },
    {
      "comment": "Function declaration syntax",
      "match": "^\\s*((?:(?:static|native|stock|public|forward)\\s*)*)(?!function)(?:(\\w*)\\s*(?:\\s+|\\:))\\s*(\\w+)\\s*\\(",
      "captures": {
        "1": {
          "name": "keyword.function.sourcepawn"
        },
        "2": {
          "name": "support.type.core.function.sourcepawn"
        },
        "3": {
          "name": "entity.name.function.function.sourcepawn"
        }
      }
    },
    {
      "comment": "Method Maps",
      "match": "^\\s*(methodmap)\\s+(\\w+)\\s*(?:<\\s*(\\w+))?",
      "captures": {
        "1": {
          "name": "keyword.methodmap.sourcepawn"
        },
        "2": {
          "name": "support.type.core.methodmap.sourcepawn"
        },
        "3": {
          "name": "support.type.core.methodmap_inherit.sourcepawn"
        }
      }
    },
    {
      "comment": "keywords",
      "name": "keyword.sourcepawn",
      "match": "\\s*\\b(?:break|continue|decl|delete|forward|native|public|stock|funcenum|functag|this|sizeof)\\b"
    },
    {
      "comment": "Function params new syntax",
      "match": "\\s*((?:(?:const|static)\\s+)*)\\s*(\\w+)(?:\\[([A-Za-z0-9_\\*\\+\\s\\-]*)\\])?\\:?\\s+([A-Za-z0-9_\\&]+)\\s*(?:\\[([A-Za-z0-9_\\*\\+\\s\\-]*)\\])?\\s*(?:\\)|,|=)",
      "captures": {
        "1": {
          "name": "keyword.function_params_new.sourcepawn"
        },
        "2": {
          "name": "support.type.core.function_params_new.sourcepawn"
        },
        "3": {
          "patterns": [
            {
              "match": "(\\d+)",
              "captures": {
                "1": {
                  "name": "constant.numeric.function_params_new.sourcepawn"
                }
              }
            }
          ]
        },
        "4": {
          "name": "variable.parameter.sourcepawn"
        },
        "5": {
          "patterns": [
            {
              "match": "(\\d+)",
              "captures": {
                "1": {
                  "name": "constant.numeric.function_params_new.sourcepawn"
                }
              }
            }
          ]
        }
      }
    },
    {
      "comment": "Function params old syntax",
      "match": "\\s*(?<!\\?\\s*)\\s*((?:(?:const|static)\\s+)*)\\s*(\\b\\w+\\b)(?:\\[([A-Za-z0-9_\\*\\+\\s\\-]*)\\]|\\s*&)?\\s*\\:\\s*(\\w+)\\s*(?:\\[([A-Za-z0-9_\\*\\+\\s\\-]*)\\]|\\s*&)?\\s*(?:\\)|,|=)",
      "captures": {
        "1": {
          "name": "keyword.function_params_old.sourcepawn"
        },
        "2": {
          "name": "support.type.core.function_params_old.sourcepawn"
        },
        "3": {
          "patterns": [
            {
              "match": "(\\d+)",
              "captures": {
                "1": {
                  "name": "constant.numeric.function_params_new.sourcepawn"
                }
              }
            }
          ]
        },
        "4": {
          "name": "variable.parameter.sourcepawn"
        },
        "5": {
          "patterns": [
            {
              "match": "(\\d+)",
              "captures": {
                "1": {
                  "name": "constant.numeric.function_params_new.sourcepawn"
                }
              }
            }
          ]
        }
      }
    },
    {
      "comment": "Variable declaration new syntax",
      "match": "^\\s*((?:(?:const|static)\\s+){0,2})(\\w+)((?:\\[(?:[A-Za-z0-9_\\*\\+\\s\\-]*)\\])*)\\s+(\\w+)\\s*((?:\\[(?:[A-Za-z0-9_\\*\\+\\s\\-]*)\\])*)\\s*(?:,|;|=)",
      "captures": {
        "1": {
          "name": "keyword.variable_new.sourcepawn"
        },
        "2": {
          "name": "support.type.core.variable_new.sourcepawn"
        },
        "3": {
          "patterns": [
            {
              "match": "(\\d+)",
              "captures": {
                "1": {
                  "name": "constant.numeric.variable_new.sourcepawn"
                }
              }
            }
          ]
        },
        "4": {
          "name": "variable.parameter.sourcepawn"
        },
        "5": {
          "patterns": [
            {
              "match": "(\\d+)",
              "captures": {
                "1": {
                  "name": "constant.numeric.variable_new_bis.sourcepawn"
                }
              }
            }
          ]
        }
      }
    },
    {
      "comment": "Variable declaration old syntax",
      "match": "(?<!\\?\\s*)(\b\\w+\b)\\s*:\\s*\\w+",
      "captures": {
        "1": {
          "name": "support.type.core.variable_old.sourcepawn"
        }
      }
    },
    {
      "comment": "Function call",
      "match": "\\b([A-Za-z_][A-Za-z0-9_]*)\\s*\\(",
      "captures": {
        "1": {
          "name": "entity.name.function.function_call.sourcepawn"
        }
      }
    },
    {
      "comment": "Core types",
      "match": "\\b(?:bool|char|float|int|void|any)\\b",
      "name": "support.type.core.sourcepawn"
    },
    {
      "comment": "Float literal",
      "match": "\\b[0-9]+\\.[0-9]+\\b",
      "name": "constant.numeric.float.sourcepawn"
    },
    {
      "comment": "Binary number",
      "match": "\\b0b[0-1]+\\b",
      "name": "constant.numeric.sourcepawn"
    },
    {
      "comment": "Octodecimal number",
      "match": "\\b0o[0-7]+\\b",
      "name": "constant.numeric.sourcepawn"
    },
    {
      "comment": "Hexadecimal number",
      "match": "\\b0x[0-9a-fA-F]+\\b",
      "name": "constant.numeric.sourcepawn"
    },
    {
      "comment": "Integer literal",
      "match": "\\b\\d+\\b",
      "name": "constant.numeric.integer.sourcepawn"
    },
    {
      "comment": "Boolean literal",
      "match": "\\b(?:true|false)\\b",
      "name": "constant.language.boolean.sourcepawn"
    },
    {
      "comment": "Null constant",
      "match": "\\bnull\\b",
      "name": "constant.language.sourcepawn"
    },
    {
      "include": "#keywords"
    },
    {
      "comment": "Match the rest as types",
      "match": "^((?:(?:const|static)\\s+){0,2})(\\w+)\\s*(?<!,\\[;)\\s*$",
      "captures": {
        "1": {
          "name": "keyword.sourcepawn"
        },
        "2": {
          "name": "support.type.sourcepawn"
        }
      }
    },
    {
      "comment": "Match the rest of the static and const",
      "match": "\\b(?:const|static)\\b",
      "name": "keyword.sourcepawn"
    },
    {
      "match": "\\bthis\\b",
      "name": "variable.language.sourcepawn"
    },
    {
      "comment": "Match the rest as variables",
      "match": "\\w+",
      "name": "variable.parameter.sourcepawn"
    }
  ],
  "repository": {
    "keywords": {
      "patterns": [
        {
          "comment": "Operator",
          "name": "keyword.operator.sourcepawn",
          "match": "%|&|\\*|/(?!\\*|/)|\\+|\\-|~|=|<|>|!|\\||\\?|:|\\^"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.sourcepawn",
          "begin": "\"",
          "end": "[^\\\\]?\"",
          "patterns": [
            {
              "name": "constant.character.format.sourcepawn",
              "match": "%(?:a|A|b|B|c|C|d|D|e|F|g|G|h|H|I|j|m|M|n|i|p|r|R|S|t|T|u|U|V|u|w|W|x|X|y|Y|z|Z|f|L|N|s|T|t|%|(?:\\d+)?\\.\\d+(?:b|d|i|u|f|s|X|x))"
            },
            {
              "name": "constant.character.escape.sourcepawn",
              "match": "\\\\(?:a|b|e|f|n|r|t|v|\"|'|\\\\|%|x[A-Fa-f0-9]{1,2})"
            },
            {
              "name": "constant.character.sp-translations",
              "match": "\\{(\\w+)\\}",
              "captures": {
                "1": {
                  "name": "constant.character.escape.sp-translations"
                }
              }
            }
          ]
        },
        {
          "name": "string.quoted.single.sourcepawn",
          "begin": "'",
          "end": "[^\\\\]?'",
          "patterns": [
            {
              "name": "constant.character.format.sourcepawn",
              "match": "%(?:c|b|d|i|u|f|L|N|s|T|t|X|x|%|(?:\\d+)?\\.\\d+(?:b|d|i|u|f|s|X|x))"
            },
            {
              "name": "constant.character.escape.sourcepawn",
              "match": "\\\\(?:a|b|e|f|n|r|t|v|\"|'|\\\\|%|x[A-Fa-f0-9]{1,2})"
            },
            {
              "name": "constant.character.sp-translations",
              "match": "\\{(\\w+)\\}",
              "captures": {
                "1": {
                  "name": "constant.character.escape.sp-translations"
                }
              }
            }
          ]
        }
      ]
    },
    "comments": {
      "patterns": [
        {
          "comment": "param spdocs single line",
          "match": "(\\/\\/)\\s*(@param)\\s+([\\w\\.]+)\\s+(.*)",
          "captures": {
            "1": { "name": "comment.sourcepawn" },
            "2": { "name": "storage.type.class.single-line.spdoc" },
            "3": { "name": "support.variable.single-line.spdoc" },
            "4": { "name": "comment.sourcepawn" }
          }
        },
        {
          "comment": "return spdocs single line",
          "match": "(\\/\\/)\\s*(@return)\\s+(.*)",
          "captures": {
            "1": { "name": "comment.sourcepawn" },
            "2": { "name": "keyword.control.single-line.spdoc" },
            "3": { "name": "comment.sourcepawn" }
          }
        },
        {
          "comment": "error spdocs single line",
          "match": "(\\/\\/)\\s*(@error)\\s+(.*)",
          "captures": {
            "1": { "name": "comment.sourcepawn" },
            "2": { "name": "string.regexp.single-line.spdoc" },
            "3": { "name": "comment.sourcepawn" }
          }
        },
        {
          "comment": "note spdocs single line",
          "match": "(\\/\\/)\\s*(@(?:note|deprecated))\\s+(.*)",
          "captures": {
            "1": { "name": "comment.sourcepawn" },
            "2": { "name": "support.function.single-line.spdoc" },
            "3": { "name": "comment.sourcepawn" }
          }
        },
        {
          "match": "\\/\\/.*",
          "name": "comment.sourcepawn"
        },
        {
          "begin": "/\\*",
          "captures": {
            "0": {
              "name": "comment.sourcepawn"
            }
          },
          "end": "\\*/",
          "name": "comment.block.sourcepawn"
        }
      ]
    }
  },
  "scopeName": "source.sourcepawn"
}
